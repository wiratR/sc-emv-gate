# .github/workflows/release-on-tag.yml
name: Release on Tag

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            build_script: build:mac
            artifacts: |
              dist/*.dmg
              dist/*.zip
          - os: windows-latest
            build_script: build:win
            artifacts: |
              dist/*.exe
              dist/*.zip
          - os: ubuntu-latest
            build_script: build:linux
            artifacts: |
              dist/*.AppImage
              dist/*.deb
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Cache Electron caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            C:\Users\runneradmin\AppData\Local\electron\Cache
            C:\Users\runneradmin\AppData\Local\electron-builder\Cache
          key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}

      - name: Install system deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential python3 make g++ pkg-config \
            libx11-dev libxkbfile-dev libsecret-1-dev \
            rpm fakeroot dpkg

      - name: macOS codesign auto (no cert)
        if: runner.os == 'macOS'
        run: echo "CSC_IDENTITY_AUTO=true" >> $GITHUB_ENV

      - name: Validate package.json (cross-platform)
        run: node -e "require('./package.json'); console.log('package.json OK')"

      - name: üè∑Ô∏è Set version from Git tag
        shell: bash
        run: |
          TAG_VERSION="${{ github.ref_name }}"
          VERSION="${TAG_VERSION#v}"
          echo "Setting version to $VERSION"
          npm version "$VERSION" --no-git-tag-version

      # ------ Make node-gyp use a known Python BEFORE npm ci ------
      - name: Setup Python 3.11 for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Select Python for node-gyp (non-Windows)
        if: runner.os != 'Windows'
        run: |
          echo "PYTHON=${{ env.pythonLocation }}/bin/python" >> $GITHUB_ENV
          npm config set python "${{ env.pythonLocation }}/bin/python"
          python --version

      - name: Select Python for node-gyp (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "PYTHON=$env:pythonLocation\python.exe" >> $env:GITHUB_ENV
          npm config set python "$env:pythonLocation\python.exe"
          python --version
      # ------------------------------------------------------------

      # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÅ‡∏ï‡πà ‚Äú‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ô postinstall‚Äù
      - name: Install deps (no scripts)
        run: npm ci --ignore-scripts

      # ‡∏£‡∏µ‡∏ö‡∏¥‡∏•‡∏î‡πå native modules ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Electron
      - name: Rebuild native modules
        run: npm run rebuild

      # Build ‡πÅ‡∏≠‡∏õ‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      - name: Build
        run: npm run ${{ matrix.build_script }}

      # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: ${{ matrix.artifacts }}
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-uploads
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist-uploads/**
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
