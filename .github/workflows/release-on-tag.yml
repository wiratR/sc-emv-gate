# .github/workflows/release-on-tag.yml
name: Release on Tag

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write  # ให้สิทธิ์สร้าง/แก้ release ด้วย GITHUB_TOKEN

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            build_script: build:mac
            artifacts: |
              dist/*.dmg
              dist/*.zip
          - os: windows-latest
            build_script: build:win
            artifacts: |
              dist/*.exe
              dist/*.zip
          - os: ubuntu-latest
            build_script: build:linux
            artifacts: |
              dist/*.AppImage
              dist/*.deb

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Setup Python 3.11 (for node-gyp)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # ชี้ npm/node-gyp ให้ใช้ Python จาก setup-python (macOS/Linux)
      - name: Point node-gyp to setup-python (non-Windows)
        if: runner.os != 'Windows'
        run: |
          echo "PYTHON=$pythonLocation/bin/python" >> $GITHUB_ENV
          echo "npm_config_python=$pythonLocation/bin/python" >> $GITHUB_ENV
          $pythonLocation/bin/python -m pip install --upgrade pip setuptools wheel

      # ชี้ npm/node-gyp ให้ใช้ Python จาก setup-python (Windows)
      - name: Point node-gyp to setup-python (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $PY = "$env:pythonLocation\python.exe"
          echo "PYTHON=$PY" >> $env:GITHUB_ENV
          echo "npm_config_python=$PY" >> $env:GITHUB_ENV
          & $PY -m pip install --upgrade pip setuptools wheel

      - name: Cache Electron caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            C:\Users\runneradmin\AppData\Local\electron\Cache
            C:\Users\runneradmin\AppData\Local\electron-builder\Cache
          key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}

      # deps เสริมบน Linux
      - name: Install system deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential make g++ pkg-config \
            libx11-dev libxkbfile-dev libsecret-1-dev \
            rpm fakeroot dpkg

      # ปิด codesign อัตโนมัติบน macOS (ไม่มี cert)
      - name: macOS codesign auto (no cert)
        if: runner.os == 'macOS'
        run: echo "CSC_IDENTITY_AUTO=true" >> $GITHUB_ENV

      - name: Validate package.json
        run: node -e "require('./package.json'); console.log('package.json OK')"

      - name: Set version from Git tag
        shell: bash
        run: |
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"
          echo "Setting version to $VERSION"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          npm version "$VERSION" --no-git-tag-version

      # ติดตั้งโดยไม่รัน postinstall (เดี๋ยว electron-builder จะ rebuild ให้)
      - name: Install deps (no scripts)
        run: npm ci --ignore-scripts

      - name: Build
        run: npm run ${{ matrix.build_script }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: ${{ matrix.artifacts }}
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
        contents: write
    env:
        GH_REPO: ${{ github.repository }}   # ✅ ชี้ repo
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist-uploads
        merge-multiple: true

    - name: List artifacts
      run: ls -R dist-uploads

    - name: Auth status
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: gh auth status --repo "$GH_REPO"

    - name: Delete existing release (if any)
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        TAG="${{ github.ref_name }}"
        if gh release view "$TAG" --repo "$GH_REPO" >/dev/null 2>&1; then
          gh release delete "$TAG" -y --repo "$GH_REPO"
        fi

    - name: Create release and upload assets
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        TAG="${{ github.ref_name }}"
        gh release create "$TAG" dist-uploads/** \
          --repo "$GH_REPO" \
          --title "$TAG" \
          --notes "Automated release for $TAG" \
          --latest
