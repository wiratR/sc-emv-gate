# .github/workflows/release-on-tag.yml

name: Release on Tag

on:
  push:
    tags:
      - "v*"         # ‡∏£‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ tag ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ v (‡πÄ‡∏ä‡πà‡∏ô v1.0.0)
  workflow_dispatch:   # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏£‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            build_script: build:mac
            artifacts: |
              dist/*.dmg
              dist/*.zip
          - os: windows-latest
            build_script: build:win
            artifacts: |
              dist/*.exe
              dist/*.zip
          - os: ubuntu-latest
            build_script: build:linux
            artifacts: |
              dist/*.AppImage
              dist/*.deb
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ) cache ‡∏ï‡∏±‡∏ß electron / electron-builder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î
      - name: Cache Electron caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            C:\Users\runneradmin\AppData\Local\electron\Cache
            C:\Users\runneradmin\AppData\Local\electron-builder\Cache
          key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}

      # lib ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢ build ‡∏ö‡∏ô Linux
      - name: Install system deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxkbfile-dev libsecret-1-dev \
                                  rpm fakeroot dpkg

      # macOS: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ cert ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å electron-builder ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô
      - name: macOS codesign auto (no cert)
        if: runner.os == 'macOS'
        run: echo "CSC_IDENTITY_AUTO=true">> $GITHUB_ENV

      - name: üè∑Ô∏è Set version from Git tag
        shell: bash
        run: | TAG_VERSION=${{ github.ref_name }} VERSION=${TAG_VERSION#v}
          echo "üîß Setting version to $VERSION"
          npm version "$VERSION" --no-git-tag-version

      - name: Install deps
        run: npm ci

      # ‚úÖ ‡∏£‡∏µ‡∏ö‡∏¥‡∏•‡∏î‡πå native modules ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Electron (better-sqlite3, node-pty)
      - name: Rebuild native modules
        run: npm run rebuild

      # Build ‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      - name: Build
        run: npm run ${{ matrix.build_script }}

      # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î artifact ‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: ${{ matrix.artifacts }}
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-uploads
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist-uploads/**
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }} # ‡∏ñ‡πâ‡∏≤ tag ‡∏°‡∏µ - (‡πÄ‡∏ä‡πà‡∏ô -beta) ‡∏à‡∏∞‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
